#! /usr/bin/env python3

import argparse

import gzip
import glob
import numpy as np
import pandas as pd
from lxml import etree

from util import log, get_parser_file_type, get_parser_directory_type
from uniref_dataset import _etree_fast_iter

class UnirefTestSetParser:

    def __init__(self, uniref_xml_gz_file_path, test_folder, output_file, verbose = True, log_progress_every = 1000, chunk_size = 100000):

        self.uniref_xml_gz_file_path = uniref_xml_gz_file_path
        self.test_folder = test_folder
        self.output_file = output_file
        self.verbose = verbose
        self.log_progress_every = log_progress_every
        self.chunk_size = chunk_size

        self._chunk_records = []
        self._test_sequences = set()

    def parse(self):
        self._test_sequences = self._unique_test_sequences(self._test_files_in_folder(self.test_folder))
        with gzip.open(self.uniref_xml_gz_file_path, 'rb') as f:
            context = etree.iterparse(f, tag = UnirefTestSetParser._NAMESPACE_PREFIX + 'entry', events = ('end',))
            _etree_fast_iter(context, self._process_entry)

        if len(self._chunk_records) > 0:
            self._save_current_chunk()

        if self.verbose:
            log('Done.')

    def _test_files_in_folder(self, folder):
        return glob.glob(f'{folder}/*.test.csv')

    def _unique_test_sequences(self, test_files):
        test_set = pd.concat([pd.read_csv(file) for file in test_files])
        sequences = set(test_set.seq.unique())
        return sequences

    def _process_entry(self, i, event, entry):

        if self.verbose and i % self.log_progress_every == 0:
            log(i, end = '\r')

        repr_member, = entry.xpath(r'uniprot:representativeMember', namespaces = UnirefTestSetParser._NAMESPACES)
        db_ref, = repr_member.xpath(r'uniprot:dbReference', namespaces = UnirefTestSetParser._NAMESPACES)
        protein_name = db_ref.attrib['id']

        try:
            sequence_entry, = repr_member.xpath(r'uniprot:sequence', namespaces = UnirefTestSetParser._NAMESPACES)
            sequence_length = int(sequence_entry.attrib['length'])
            sequence = sequence_entry.text
        except:
            sequence_length = np.nan
            sequence = ''

        if sequence in self._test_sequences:
            self._chunk_records.append(protein_name)

        if len(self._chunk_records) >= self.chunk_size:
            self._save_current_chunk()

    def _save_current_chunk(self):
        chunk_records_df = pd.DataFrame(self._chunk_records, columns = ['uniprot_name'], index = self._chunk_indices)
        chunk_records_df.to_csv(self.output_file, mode='a', header=False, index=False)

        self._chunk_records = []

    _NAMESPACE_PREFIX = r'{http://uniprot.org/uniref}'
    _NAMESPACES = {'uniprot': r'http://uniprot.org/uniref'}


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description = 'Parse out test names.')
    parser.add_argument('--uniref-xml-gz-file', dest = 'uniref_xml_gz_file', metavar = '/path/to/unirefXX.xml.gz', type = get_parser_file_type(parser, must_exist = True), \
            required = True, help = 'Path to the raw UniRef file.')
    parser.add_argument('--test-file-folder', dest = 'test_file_folder', metavar = '/path/to/*.test.csv', type = get_parser_directory_type(parser), required = True, help = 'The folder containing test files.')
    parser.add_argument('--output-file', dest = 'output_file', metavar = '/path/to/uniref_90_seqs_matching_test_set_seqs.txt', type = get_parser_file_type(parser), required = True, help = 'Path to the save the output file.')
    args = parser.parse_args()

    UnirefTestSetParser(args.uniref_xml_gz_file, args.test_file_folder, args.output_file).parse()
